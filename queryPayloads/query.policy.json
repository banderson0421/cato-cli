{
    "operationName": "policy",
    "query": "query policy ( $InternetFirewallPolicyInput:InternetFirewallPolicyInput $WanFirewallPolicyInput:WanFirewallPolicyInput ) { policy ( ) { internetFirewall { policy ( input:$InternetFirewallPolicyInput ) { enabled InternetFirewallRulePayloadRules: rules { PolicyElementAuditAudit: audit { updatedTime updatedBy } InternetFirewallRuleRule: rule { id name description index PolicySectionInfoSection: section { id name } enabled InternetFirewallSourceSource: source { ip HostRefHost: host { id name } SiteRefSite: site { id name } subnet IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } NetworkInterfaceRefNetworkInterface: networkInterface { id name } SiteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } FloatingSubnetRefFloatingSubnet: floatingSubnet { id name } UserRefUser: user { id name } UsersGroupRefUsersGroup: usersGroup { id name } GroupRefGroup: group { id name } SystemGroupRefSystemGroup: systemGroup { id name } } ConnectionOriginEnumConnectionOrigin: connectionOrigin CountryRefCountry: country { id name } DeviceProfileRefDevice: device { id name } OperatingSystemDeviceOS: deviceOS InternetFirewallDestinationDestination: destination { ApplicationRefApplication: application { id name } CustomApplicationRefCustomApp: customApp { id name } ApplicationCategoryRefAppCategory: appCategory { id name } CustomCategoryRefCustomCategory: customCategory { id name } SanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } CountryRefCountry: country { id name } domain fqdn ip subnet IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } remoteAsn ContainerRefContainer: container { id name } InternetFirewallContainerContainers: containers { FqdnContainerRefFqdnContainer: fqdnContainer { id name } IpAddressRangeContainerRefIpAddressRangeContainer: ipAddressRangeContainer { id name } } } InternetFirewallServiceTypeService: service { ServiceRefStandard: standard { id name } CustomServiceCustom: custom { port PortRangePortRange: portRange { from to } IpProtocolProtocol: protocol } } InternetFirewallActionEnumAction: action PolicyTrackingTracking: tracking { PolicyRuleTrackingEventEvent: event { enabled } PolicyRuleTrackingAlertAlert: alert { enabled PolicyRuleTrackingFrequencyEnumFrequency: frequency SubscriptionGroupRefSubscriptionGroup: subscriptionGroup { id name } SubscriptionWebhookRefWebhook: webhook { id name } SubscriptionMailingListRefMailingList: mailingList { id name } } } PolicyScheduleSchedule: schedule { PolicyActiveOnEnumActiveOn: activeOn PolicyCustomTimeframeCustomTimeframe: customTimeframe { from to } PolicyCustomRecurringCustomRecurring: customRecurring { from to days } } InternetFirewallRuleExceptionExceptions: exceptions { name InternetFirewallSourceSource: source { ip HostRefHost: host { id name } SiteRefSite: site { id name } subnet IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } NetworkInterfaceRefNetworkInterface: networkInterface { id name } SiteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } FloatingSubnetRefFloatingSubnet: floatingSubnet { id name } UserRefUser: user { id name } UsersGroupRefUsersGroup: usersGroup { id name } GroupRefGroup: group { id name } SystemGroupRefSystemGroup: systemGroup { id name } } OperatingSystemDeviceOS: deviceOS CountryRefCountry: country { id name } DeviceProfileRefDevice: device { id name } InternetFirewallDestinationDestination: destination { ApplicationRefApplication: application { id name } CustomApplicationRefCustomApp: customApp { id name } ApplicationCategoryRefAppCategory: appCategory { id name } CustomCategoryRefCustomCategory: customCategory { id name } SanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } CountryRefCountry: country { id name } domain fqdn ip subnet IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } remoteAsn ContainerRefContainer: container { id name } InternetFirewallContainerContainers: containers { FqdnContainerRefFqdnContainer: fqdnContainer {  id  name } IpAddressRangeContainerRefIpAddressRangeContainer: ipAddressRangeContainer {  id  name } } } InternetFirewallServiceTypeService: service { ServiceRefStandard: standard { id name } CustomServiceCustom: custom { port PortRangePortRange: portRange {  from  to } IpProtocolProtocol: protocol } } ConnectionOriginEnumConnectionOrigin: connectionOrigin } } PolicyElementPropertiesEnumProperties: properties } PolicySectionPayloadSections: sections { PolicyElementAuditAudit: audit { updatedTime updatedBy } PolicySectionInfoSection: section { id name } PolicyElementPropertiesEnumProperties: properties } PolicyAuditAudit: audit { publishedTime publishedBy } PolicyRevisionRevision: revision { id name description changes createdTime updatedTime } } revisions { revision { id name description changes createdTime updatedTime } } } wanFirewall { policy ( input:$WanFirewallPolicyInput ) { enabled WanFirewallRulePayloadRules: rules { PolicyElementAuditAudit: audit { updatedTime updatedBy } WanFirewallRuleRule: rule { id name description index PolicySectionInfoSection: section { id name } enabled WanFirewallSourceSource: source { HostRefHost: host { id name } SiteRefSite: site { id name } subnet ip IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } NetworkInterfaceRefNetworkInterface: networkInterface { id name } SiteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } FloatingSubnetRefFloatingSubnet: floatingSubnet { id name } UserRefUser: user { id name } UsersGroupRefUsersGroup: usersGroup { id name } GroupRefGroup: group { id name } SystemGroupRefSystemGroup: systemGroup { id name } } ConnectionOriginEnumConnectionOrigin: connectionOrigin CountryRefCountry: country { id name } DeviceProfileRefDevice: device { id name } OperatingSystemDeviceOS: deviceOS WanFirewallDestinationDestination: destination { HostRefHost: host { id name } SiteRefSite: site { id name } subnet ip IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } NetworkInterfaceRefNetworkInterface: networkInterface { id name } SiteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } FloatingSubnetRefFloatingSubnet: floatingSubnet { id name } UserRefUser: user { id name } UsersGroupRefUsersGroup: usersGroup { id name } GroupRefGroup: group { id name } SystemGroupRefSystemGroup: systemGroup { id name } } WanFirewallApplicationApplication: application { ApplicationRefApplication: application { id name } ApplicationCategoryRefAppCategory: appCategory { id name } CustomApplicationRefCustomApp: customApp { id name } CustomCategoryRefCustomCategory: customCategory { id name } SanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } domain fqdn ip subnet IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } } WanFirewallServiceTypeService: service { ServiceRefStandard: standard { id name } CustomServiceCustom: custom { port PortRangePortRange: portRange { from to } IpProtocolProtocol: protocol } } WanFirewallActionEnumAction: action PolicyTrackingTracking: tracking { PolicyRuleTrackingEventEvent: event { enabled } PolicyRuleTrackingAlertAlert: alert { enabled PolicyRuleTrackingFrequencyEnumFrequency: frequency SubscriptionGroupRefSubscriptionGroup: subscriptionGroup { id name } SubscriptionWebhookRefWebhook: webhook { id name } SubscriptionMailingListRefMailingList: mailingList { id name } } } PolicyScheduleSchedule: schedule { PolicyActiveOnEnumActiveOn: activeOn PolicyCustomTimeframeCustomTimeframe: customTimeframe { from to } PolicyCustomRecurringCustomRecurring: customRecurring { from to days } } WanFirewallDirectionEnumDirection: direction WanFirewallRuleExceptionExceptions: exceptions { name WanFirewallSourceSource: source { HostRefHost: host { id name } SiteRefSite: site { id name } subnet ip IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } NetworkInterfaceRefNetworkInterface: networkInterface { id name } SiteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } FloatingSubnetRefFloatingSubnet: floatingSubnet { id name } UserRefUser: user { id name } UsersGroupRefUsersGroup: usersGroup { id name } GroupRefGroup: group { id name } SystemGroupRefSystemGroup: systemGroup { id name } } OperatingSystemDeviceOS: deviceOS WanFirewallDestinationDestination: destination { HostRefHost: host { id name } SiteRefSite: site { id name } subnet ip IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } NetworkInterfaceRefNetworkInterface: networkInterface { id name } SiteNetworkSubnetRefSiteNetworkSubnet: siteNetworkSubnet { id name } FloatingSubnetRefFloatingSubnet: floatingSubnet { id name } UserRefUser: user { id name } UsersGroupRefUsersGroup: usersGroup { id name } GroupRefGroup: group { id name } SystemGroupRefSystemGroup: systemGroup { id name } } CountryRefCountry: country { id name } DeviceProfileRefDevice: device { id name } WanFirewallApplicationApplication: application { ApplicationRefApplication: application { id name } ApplicationCategoryRefAppCategory: appCategory { id name } CustomApplicationRefCustomApp: customApp { id name } CustomCategoryRefCustomCategory: customCategory { id name } SanctionedAppsCategoryRefSanctionedAppsCategory: sanctionedAppsCategory { id name } domain fqdn ip subnet IpAddressRangeIpRange: ipRange { from to } GlobalIpRangeRefGlobalIpRange: globalIpRange { id name } } WanFirewallServiceTypeService: service { ServiceRefStandard: standard { id name } CustomServiceCustom: custom { port PortRangePortRange: portRange {  from  to } IpProtocolProtocol: protocol } } ConnectionOriginEnumConnectionOrigin: connectionOrigin WanFirewallDirectionEnumDirection: direction } } PolicyElementPropertiesEnumProperties: properties } PolicySectionPayloadSections: sections { PolicyElementAuditAudit: audit { updatedTime updatedBy } PolicySectionInfoSection: section { id name } PolicyElementPropertiesEnumProperties: properties } PolicyAuditAudit: audit { publishedTime publishedBy } PolicyRevisionRevision: revision { id name description changes createdTime updatedTime } } revisions { revision { id name description changes createdTime updatedTime } } } } }",
    "variables": {
        "InternetFirewallPolicyInput": {
            "PolicyRevisionInput": {
                "id": {
                    "id": "ID"
                },
                "type": {
                    "type": "enum(PolicyRevisionType)"
                }
            }
        },
        "WanFirewallPolicyInput": {
            "PolicyRevisionInput": {
                "id": {
                    "id": "ID"
                },
                "type": {
                    "type": "enum(PolicyRevisionType)"
                }
            }
        }
    }
}